package com.snh.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.fdl.bean.daoBean.CommTenantType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMM_TENANT_TYPE".
*/
public class CommTenantTypeDao extends AbstractDao<CommTenantType, Long> {

    public static final String TABLENAME = "COMM_TENANT_TYPE";

    /**
     * Properties of entity CommTenantType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property TypeId = new Property(1, int.class, "TypeId", false, "TYPE_ID");
        public final static Property TypeName = new Property(2, String.class, "TypeName", false, "TYPE_NAME");
        public final static Property CommtenantTypeId = new Property(3, long.class, "commtenantTypeId", false, "COMMTENANT_TYPE_ID");
    }

    private DaoSession daoSession;

    private Query<CommTenantType> supplierBean_CommTenantResultListQuery;

    public CommTenantTypeDao(DaoConfig config) {
        super(config);
    }
    
    public CommTenantTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMM_TENANT_TYPE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TYPE_ID\" INTEGER NOT NULL ," + // 1: TypeId
                "\"TYPE_NAME\" TEXT," + // 2: TypeName
                "\"COMMTENANT_TYPE_ID\" INTEGER NOT NULL );"); // 3: commtenantTypeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMM_TENANT_TYPE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommTenantType entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getTypeId());
 
        String TypeName = entity.getTypeName();
        if (TypeName != null) {
            stmt.bindString(3, TypeName);
        }
        stmt.bindLong(4, entity.getCommtenantTypeId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommTenantType entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getTypeId());
 
        String TypeName = entity.getTypeName();
        if (TypeName != null) {
            stmt.bindString(3, TypeName);
        }
        stmt.bindLong(4, entity.getCommtenantTypeId());
    }

    @Override
    protected final void attachEntity(CommTenantType entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CommTenantType readEntity(Cursor cursor, int offset) {
        CommTenantType entity = new CommTenantType( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // TypeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TypeName
            cursor.getLong(offset + 3) // commtenantTypeId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommTenantType entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTypeId(cursor.getInt(offset + 1));
        entity.setTypeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCommtenantTypeId(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommTenantType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommTenantType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommTenantType entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "CommTenantResultList" to-many relationship of SupplierBean. */
    public List<CommTenantType> _querySupplierBean_CommTenantResultList(long commtenantTypeId) {
        synchronized (this) {
            if (supplierBean_CommTenantResultListQuery == null) {
                QueryBuilder<CommTenantType> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CommtenantTypeId.eq(null));
                supplierBean_CommTenantResultListQuery = queryBuilder.build();
            }
        }
        Query<CommTenantType> query = supplierBean_CommTenantResultListQuery.forCurrentThread();
        query.setParameter(0, commtenantTypeId);
        return query.list();
    }

}
