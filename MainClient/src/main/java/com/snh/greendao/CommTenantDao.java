package com.snh.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.fdl.bean.daoBean.CommTenant;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMM_TENANT".
*/
public class CommTenantDao extends AbstractDao<CommTenant, Long> {

    public static final String TABLENAME = "COMM_TENANT";

    /**
     * Properties of entity CommTenant.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CommTenantId = new Property(0, Long.class, "CommTenantId", true, "_id");
        public final static Property SupplierId = new Property(1, int.class, "SupplierId", false, "SUPPLIER_ID");
        public final static Property CommTenantName = new Property(2, String.class, "CommTenantName", false, "COMM_TENANT_NAME");
        public final static Property CommTenantIcon = new Property(3, String.class, "CommTenantIcon", false, "COMM_TENANT_ICON");
        public final static Property OnThePin = new Property(4, int.class, "OnThePin", false, "ON_THE_PIN");
        public final static Property Price = new Property(5, double.class, "Price", false, "PRICE");
        public final static Property UnitsTitle = new Property(6, String.class, "UnitsTitle", false, "UNITS_TITLE");
        public final static Property Total = new Property(7, int.class, "total", false, "TOTAL");
        public final static Property CommtenantId = new Property(8, long.class, "commtenantId", false, "COMMTENANT_ID");
        public final static Property Inventory = new Property(9, long.class, "Inventory", false, "INVENTORY");
        public final static Property GoodsNum = new Property(10, int.class, "GoodsNum", false, "GOODS_NUM");
    }

    private Query<CommTenant> commTenantType_CommTenantListQuery;

    public CommTenantDao(DaoConfig config) {
        super(config);
    }
    
    public CommTenantDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMM_TENANT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: CommTenantId
                "\"SUPPLIER_ID\" INTEGER NOT NULL ," + // 1: SupplierId
                "\"COMM_TENANT_NAME\" TEXT," + // 2: CommTenantName
                "\"COMM_TENANT_ICON\" TEXT," + // 3: CommTenantIcon
                "\"ON_THE_PIN\" INTEGER NOT NULL ," + // 4: OnThePin
                "\"PRICE\" REAL NOT NULL ," + // 5: Price
                "\"UNITS_TITLE\" TEXT," + // 6: UnitsTitle
                "\"TOTAL\" INTEGER NOT NULL ," + // 7: total
                "\"COMMTENANT_ID\" INTEGER NOT NULL ," + // 8: commtenantId
                "\"INVENTORY\" INTEGER NOT NULL ," + // 9: Inventory
                "\"GOODS_NUM\" INTEGER NOT NULL );"); // 10: GoodsNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMM_TENANT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommTenant entity) {
        stmt.clearBindings();
 
        Long CommTenantId = entity.getCommTenantId();
        if (CommTenantId != null) {
            stmt.bindLong(1, CommTenantId);
        }
        stmt.bindLong(2, entity.getSupplierId());
 
        String CommTenantName = entity.getCommTenantName();
        if (CommTenantName != null) {
            stmt.bindString(3, CommTenantName);
        }
 
        String CommTenantIcon = entity.getCommTenantIcon();
        if (CommTenantIcon != null) {
            stmt.bindString(4, CommTenantIcon);
        }
        stmt.bindLong(5, entity.getOnThePin());
        stmt.bindDouble(6, entity.getPrice());
 
        String UnitsTitle = entity.getUnitsTitle();
        if (UnitsTitle != null) {
            stmt.bindString(7, UnitsTitle);
        }
        stmt.bindLong(8, entity.getTotal());
        stmt.bindLong(9, entity.getCommtenantId());
        stmt.bindLong(10, entity.getInventory());
        stmt.bindLong(11, entity.getGoodsNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommTenant entity) {
        stmt.clearBindings();
 
        Long CommTenantId = entity.getCommTenantId();
        if (CommTenantId != null) {
            stmt.bindLong(1, CommTenantId);
        }
        stmt.bindLong(2, entity.getSupplierId());
 
        String CommTenantName = entity.getCommTenantName();
        if (CommTenantName != null) {
            stmt.bindString(3, CommTenantName);
        }
 
        String CommTenantIcon = entity.getCommTenantIcon();
        if (CommTenantIcon != null) {
            stmt.bindString(4, CommTenantIcon);
        }
        stmt.bindLong(5, entity.getOnThePin());
        stmt.bindDouble(6, entity.getPrice());
 
        String UnitsTitle = entity.getUnitsTitle();
        if (UnitsTitle != null) {
            stmt.bindString(7, UnitsTitle);
        }
        stmt.bindLong(8, entity.getTotal());
        stmt.bindLong(9, entity.getCommtenantId());
        stmt.bindLong(10, entity.getInventory());
        stmt.bindLong(11, entity.getGoodsNum());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CommTenant readEntity(Cursor cursor, int offset) {
        CommTenant entity = new CommTenant( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // CommTenantId
            cursor.getInt(offset + 1), // SupplierId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CommTenantName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CommTenantIcon
            cursor.getInt(offset + 4), // OnThePin
            cursor.getDouble(offset + 5), // Price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // UnitsTitle
            cursor.getInt(offset + 7), // total
            cursor.getLong(offset + 8), // commtenantId
            cursor.getLong(offset + 9), // Inventory
            cursor.getInt(offset + 10) // GoodsNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommTenant entity, int offset) {
        entity.setCommTenantId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSupplierId(cursor.getInt(offset + 1));
        entity.setCommTenantName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCommTenantIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOnThePin(cursor.getInt(offset + 4));
        entity.setPrice(cursor.getDouble(offset + 5));
        entity.setUnitsTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTotal(cursor.getInt(offset + 7));
        entity.setCommtenantId(cursor.getLong(offset + 8));
        entity.setInventory(cursor.getLong(offset + 9));
        entity.setGoodsNum(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommTenant entity, long rowId) {
        entity.setCommTenantId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommTenant entity) {
        if(entity != null) {
            return entity.getCommTenantId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommTenant entity) {
        return entity.getCommTenantId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "CommTenantList" to-many relationship of CommTenantType. */
    public List<CommTenant> _queryCommTenantType_CommTenantList(long commtenantId) {
        synchronized (this) {
            if (commTenantType_CommTenantListQuery == null) {
                QueryBuilder<CommTenant> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CommtenantId.eq(null));
                commTenantType_CommTenantListQuery = queryBuilder.build();
            }
        }
        Query<CommTenant> query = commTenantType_CommTenantListQuery.forCurrentThread();
        query.setParameter(0, commtenantId);
        return query.list();
    }

}
