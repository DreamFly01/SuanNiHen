package com.snh.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fdl.bean.daoBean.SupplierBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUPPLIER_BEAN".
*/
public class SupplierBeanDao extends AbstractDao<SupplierBean, Long> {

    public static final String TABLENAME = "SUPPLIER_BEAN";

    /**
     * Properties of entity SupplierBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property SupplierId = new Property(1, int.class, "SupplierId", false, "SUPPLIER_ID");
        public final static Property SupplierName = new Property(2, String.class, "SupplierName", false, "SUPPLIER_NAME");
        public final static Property SupplierIcon = new Property(3, String.class, "SupplierIcon", false, "SUPPLIER_ICON");
        public final static Property SupplierLevel = new Property(4, String.class, "SupplierLevel", false, "SUPPLIER_LEVEL");
        public final static Property Address = new Property(5, String.class, "Address", false, "ADDRESS");
        public final static Property Longitude = new Property(6, String.class, "Longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(7, String.class, "Latitude", false, "LATITUDE");
        public final static Property IsFavorite = new Property(8, boolean.class, "IsFavorite", false, "IS_FAVORITE");
        public final static Property FxUrl = new Property(9, String.class, "FxUrl", false, "FX_URL");
        public final static Property XCXUrl = new Property(10, String.class, "XCXUrl", false, "XCXURL");
        public final static Property ServiceTel = new Property(11, String.class, "ServiceTel", false, "SERVICE_TEL");
        public final static Property BusinessHour = new Property(12, String.class, "BusinessHour", false, "BUSINESS_HOUR");
        public final static Property ServerContent = new Property(13, String.class, "ServerContent", false, "SERVER_CONTENT");
    }

    private DaoSession daoSession;


    public SupplierBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SupplierBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUPPLIER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"SUPPLIER_ID\" INTEGER NOT NULL ," + // 1: SupplierId
                "\"SUPPLIER_NAME\" TEXT," + // 2: SupplierName
                "\"SUPPLIER_ICON\" TEXT," + // 3: SupplierIcon
                "\"SUPPLIER_LEVEL\" TEXT," + // 4: SupplierLevel
                "\"ADDRESS\" TEXT," + // 5: Address
                "\"LONGITUDE\" TEXT," + // 6: Longitude
                "\"LATITUDE\" TEXT," + // 7: Latitude
                "\"IS_FAVORITE\" INTEGER NOT NULL ," + // 8: IsFavorite
                "\"FX_URL\" TEXT," + // 9: FxUrl
                "\"XCXURL\" TEXT," + // 10: XCXUrl
                "\"SERVICE_TEL\" TEXT," + // 11: ServiceTel
                "\"BUSINESS_HOUR\" TEXT," + // 12: BusinessHour
                "\"SERVER_CONTENT\" TEXT);"); // 13: ServerContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUPPLIER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SupplierBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getSupplierId());
 
        String SupplierName = entity.getSupplierName();
        if (SupplierName != null) {
            stmt.bindString(3, SupplierName);
        }
 
        String SupplierIcon = entity.getSupplierIcon();
        if (SupplierIcon != null) {
            stmt.bindString(4, SupplierIcon);
        }
 
        String SupplierLevel = entity.getSupplierLevel();
        if (SupplierLevel != null) {
            stmt.bindString(5, SupplierLevel);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(6, Address);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(7, Longitude);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(8, Latitude);
        }
        stmt.bindLong(9, entity.getIsFavorite() ? 1L: 0L);
 
        String FxUrl = entity.getFxUrl();
        if (FxUrl != null) {
            stmt.bindString(10, FxUrl);
        }
 
        String XCXUrl = entity.getXCXUrl();
        if (XCXUrl != null) {
            stmt.bindString(11, XCXUrl);
        }
 
        String ServiceTel = entity.getServiceTel();
        if (ServiceTel != null) {
            stmt.bindString(12, ServiceTel);
        }
 
        String BusinessHour = entity.getBusinessHour();
        if (BusinessHour != null) {
            stmt.bindString(13, BusinessHour);
        }
 
        String ServerContent = entity.getServerContent();
        if (ServerContent != null) {
            stmt.bindString(14, ServerContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SupplierBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getSupplierId());
 
        String SupplierName = entity.getSupplierName();
        if (SupplierName != null) {
            stmt.bindString(3, SupplierName);
        }
 
        String SupplierIcon = entity.getSupplierIcon();
        if (SupplierIcon != null) {
            stmt.bindString(4, SupplierIcon);
        }
 
        String SupplierLevel = entity.getSupplierLevel();
        if (SupplierLevel != null) {
            stmt.bindString(5, SupplierLevel);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(6, Address);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(7, Longitude);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(8, Latitude);
        }
        stmt.bindLong(9, entity.getIsFavorite() ? 1L: 0L);
 
        String FxUrl = entity.getFxUrl();
        if (FxUrl != null) {
            stmt.bindString(10, FxUrl);
        }
 
        String XCXUrl = entity.getXCXUrl();
        if (XCXUrl != null) {
            stmt.bindString(11, XCXUrl);
        }
 
        String ServiceTel = entity.getServiceTel();
        if (ServiceTel != null) {
            stmt.bindString(12, ServiceTel);
        }
 
        String BusinessHour = entity.getBusinessHour();
        if (BusinessHour != null) {
            stmt.bindString(13, BusinessHour);
        }
 
        String ServerContent = entity.getServerContent();
        if (ServerContent != null) {
            stmt.bindString(14, ServerContent);
        }
    }

    @Override
    protected final void attachEntity(SupplierBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public SupplierBean readEntity(Cursor cursor, int offset) {
        SupplierBean entity = new SupplierBean( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // SupplierId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SupplierName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SupplierIcon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SupplierLevel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Longitude
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Latitude
            cursor.getShort(offset + 8) != 0, // IsFavorite
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // FxUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // XCXUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ServiceTel
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // BusinessHour
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // ServerContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SupplierBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setSupplierId(cursor.getInt(offset + 1));
        entity.setSupplierName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSupplierIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSupplierLevel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLongitude(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLatitude(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsFavorite(cursor.getShort(offset + 8) != 0);
        entity.setFxUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setXCXUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setServiceTel(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBusinessHour(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setServerContent(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SupplierBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SupplierBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SupplierBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
