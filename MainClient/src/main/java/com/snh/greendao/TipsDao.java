package com.snh.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fdl.bean.daoBean.Tips;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TIPS".
*/
public class TipsDao extends AbstractDao<Tips, Long> {

    public static final String TABLENAME = "TIPS";

    /**
     * Properties of entity Tips.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TipsId = new Property(0, Long.class, "tipsId", true, "_id");
        public final static Property AdminId = new Property(1, int.class, "AdminId", false, "ADMIN_ID");
        public final static Property Front = new Property(2, String.class, "Front", false, "FRONT");
        public final static Property Title = new Property(3, String.class, "Title", false, "TITLE");
        public final static Property Defaults = new Property(4, int.class, "Defaults", false, "DEFAULTS");
        public final static Property Audit = new Property(5, boolean.class, "Audit", false, "AUDIT");
        public final static Property LocalUrl = new Property(6, String.class, "localUrl", false, "LOCAL_URL");
        public final static Property CreateTime = new Property(7, String.class, "CreateTime", false, "CREATE_TIME");
    }


    public TipsDao(DaoConfig config) {
        super(config);
    }
    
    public TipsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TIPS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: tipsId
                "\"ADMIN_ID\" INTEGER NOT NULL ," + // 1: AdminId
                "\"FRONT\" TEXT," + // 2: Front
                "\"TITLE\" TEXT," + // 3: Title
                "\"DEFAULTS\" INTEGER NOT NULL ," + // 4: Defaults
                "\"AUDIT\" INTEGER NOT NULL ," + // 5: Audit
                "\"LOCAL_URL\" TEXT," + // 6: localUrl
                "\"CREATE_TIME\" TEXT);"); // 7: CreateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TIPS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Tips entity) {
        stmt.clearBindings();
 
        Long tipsId = entity.getTipsId();
        if (tipsId != null) {
            stmt.bindLong(1, tipsId);
        }
        stmt.bindLong(2, entity.getAdminId());
 
        String Front = entity.getFront();
        if (Front != null) {
            stmt.bindString(3, Front);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(4, Title);
        }
        stmt.bindLong(5, entity.getDefaults());
        stmt.bindLong(6, entity.getAudit() ? 1L: 0L);
 
        String localUrl = entity.getLocalUrl();
        if (localUrl != null) {
            stmt.bindString(7, localUrl);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(8, CreateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Tips entity) {
        stmt.clearBindings();
 
        Long tipsId = entity.getTipsId();
        if (tipsId != null) {
            stmt.bindLong(1, tipsId);
        }
        stmt.bindLong(2, entity.getAdminId());
 
        String Front = entity.getFront();
        if (Front != null) {
            stmt.bindString(3, Front);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(4, Title);
        }
        stmt.bindLong(5, entity.getDefaults());
        stmt.bindLong(6, entity.getAudit() ? 1L: 0L);
 
        String localUrl = entity.getLocalUrl();
        if (localUrl != null) {
            stmt.bindString(7, localUrl);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(8, CreateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Tips readEntity(Cursor cursor, int offset) {
        Tips entity = new Tips( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // tipsId
            cursor.getInt(offset + 1), // AdminId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Front
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Title
            cursor.getInt(offset + 4), // Defaults
            cursor.getShort(offset + 5) != 0, // Audit
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // localUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // CreateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Tips entity, int offset) {
        entity.setTipsId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdminId(cursor.getInt(offset + 1));
        entity.setFront(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDefaults(cursor.getInt(offset + 4));
        entity.setAudit(cursor.getShort(offset + 5) != 0);
        entity.setLocalUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Tips entity, long rowId) {
        entity.setTipsId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Tips entity) {
        if(entity != null) {
            return entity.getTipsId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Tips entity) {
        return entity.getTipsId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
