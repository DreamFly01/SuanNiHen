package com.snh.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fdl.bean.daoBean.AearBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AEAR_BEAN".
*/
public class AearBeanDao extends AbstractDao<AearBean, Void> {

    public static final String TABLENAME = "AEAR_BEAN";

    /**
     * Properties of entity AearBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property ParentID = new Property(1, String.class, "ParentID", false, "PARENT_ID");
        public final static Property Level = new Property(2, String.class, "Level", false, "LEVEL");
        public final static Property AddressName = new Property(3, String.class, "AddressName", false, "ADDRESS_NAME");
        public final static Property Sort = new Property(4, String.class, "Sort", false, "SORT");
        public final static Property States = new Property(5, String.class, "States", false, "STATES");
        public final static Property Description = new Property(6, String.class, "Description", false, "DESCRIPTION");
    }


    public AearBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AearBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AEAR_BEAN\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"PARENT_ID\" TEXT," + // 1: ParentID
                "\"LEVEL\" TEXT," + // 2: Level
                "\"ADDRESS_NAME\" TEXT," + // 3: AddressName
                "\"SORT\" TEXT," + // 4: Sort
                "\"STATES\" TEXT," + // 5: States
                "\"DESCRIPTION\" TEXT);"); // 6: Description
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AEAR_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AearBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String ParentID = entity.getParentID();
        if (ParentID != null) {
            stmt.bindString(2, ParentID);
        }
 
        String Level = entity.getLevel();
        if (Level != null) {
            stmt.bindString(3, Level);
        }
 
        String AddressName = entity.getAddressName();
        if (AddressName != null) {
            stmt.bindString(4, AddressName);
        }
 
        String Sort = entity.getSort();
        if (Sort != null) {
            stmt.bindString(5, Sort);
        }
 
        String States = entity.getStates();
        if (States != null) {
            stmt.bindString(6, States);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(7, Description);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AearBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String ParentID = entity.getParentID();
        if (ParentID != null) {
            stmt.bindString(2, ParentID);
        }
 
        String Level = entity.getLevel();
        if (Level != null) {
            stmt.bindString(3, Level);
        }
 
        String AddressName = entity.getAddressName();
        if (AddressName != null) {
            stmt.bindString(4, AddressName);
        }
 
        String Sort = entity.getSort();
        if (Sort != null) {
            stmt.bindString(5, Sort);
        }
 
        String States = entity.getStates();
        if (States != null) {
            stmt.bindString(6, States);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(7, Description);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AearBean readEntity(Cursor cursor, int offset) {
        AearBean entity = new AearBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ParentID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Level
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // AddressName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Sort
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // States
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // Description
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AearBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setParentID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLevel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddressName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSort(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStates(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AearBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AearBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(AearBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
