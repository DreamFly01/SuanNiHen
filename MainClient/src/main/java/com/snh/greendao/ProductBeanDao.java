package com.snh.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fdl.bean.daoBean.ProductBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT_BEAN".
*/
public class ProductBeanDao extends AbstractDao<ProductBean, Long> {

    public static final String TABLENAME = "PRODUCT_BEAN";

    /**
     * Properties of entity ProductBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ProductId = new Property(0, Long.class, "productId", true, "_id");
        public final static Property Id = new Property(1, int.class, "Id", false, "ID");
        public final static Property Name = new Property(2, String.class, "Name", false, "NAME");
        public final static Property MarketNumber = new Property(3, int.class, "MarketNumber", false, "MARKET_NUMBER");
        public final static Property GoodsImg = new Property(4, String.class, "GoodsImg", false, "GOODS_IMG");
        public final static Property MarketPrice = new Property(5, double.class, "MarketPrice", false, "MARKET_PRICE");
        public final static Property SalesPrice = new Property(6, double.class, "SalesPrice", false, "SALES_PRICE");
        public final static Property DetailUrl = new Property(7, String.class, "DetailUrl", false, "DETAIL_URL");
    }


    public ProductBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ProductBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: productId
                "\"ID\" INTEGER NOT NULL ," + // 1: Id
                "\"NAME\" TEXT," + // 2: Name
                "\"MARKET_NUMBER\" INTEGER NOT NULL ," + // 3: MarketNumber
                "\"GOODS_IMG\" TEXT," + // 4: GoodsImg
                "\"MARKET_PRICE\" REAL NOT NULL ," + // 5: MarketPrice
                "\"SALES_PRICE\" REAL NOT NULL ," + // 6: SalesPrice
                "\"DETAIL_URL\" TEXT);"); // 7: DetailUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProductBean entity) {
        stmt.clearBindings();
 
        Long productId = entity.getProductId();
        if (productId != null) {
            stmt.bindLong(1, productId);
        }
        stmt.bindLong(2, entity.getId());
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
        stmt.bindLong(4, entity.getMarketNumber());
 
        String GoodsImg = entity.getGoodsImg();
        if (GoodsImg != null) {
            stmt.bindString(5, GoodsImg);
        }
        stmt.bindDouble(6, entity.getMarketPrice());
        stmt.bindDouble(7, entity.getSalesPrice());
 
        String DetailUrl = entity.getDetailUrl();
        if (DetailUrl != null) {
            stmt.bindString(8, DetailUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProductBean entity) {
        stmt.clearBindings();
 
        Long productId = entity.getProductId();
        if (productId != null) {
            stmt.bindLong(1, productId);
        }
        stmt.bindLong(2, entity.getId());
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
        stmt.bindLong(4, entity.getMarketNumber());
 
        String GoodsImg = entity.getGoodsImg();
        if (GoodsImg != null) {
            stmt.bindString(5, GoodsImg);
        }
        stmt.bindDouble(6, entity.getMarketPrice());
        stmt.bindDouble(7, entity.getSalesPrice());
 
        String DetailUrl = entity.getDetailUrl();
        if (DetailUrl != null) {
            stmt.bindString(8, DetailUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProductBean readEntity(Cursor cursor, int offset) {
        ProductBean entity = new ProductBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // productId
            cursor.getInt(offset + 1), // Id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Name
            cursor.getInt(offset + 3), // MarketNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // GoodsImg
            cursor.getDouble(offset + 5), // MarketPrice
            cursor.getDouble(offset + 6), // SalesPrice
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // DetailUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProductBean entity, int offset) {
        entity.setProductId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMarketNumber(cursor.getInt(offset + 3));
        entity.setGoodsImg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMarketPrice(cursor.getDouble(offset + 5));
        entity.setSalesPrice(cursor.getDouble(offset + 6));
        entity.setDetailUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProductBean entity, long rowId) {
        entity.setProductId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProductBean entity) {
        if(entity != null) {
            return entity.getProductId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProductBean entity) {
        return entity.getProductId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
